**BUILD_INSTRUCTIONS**

To build all the sources of the ReaK platform, including all test programs, the process should be familiar to anyone who has ever used the CMake build system before.

Required:
 - CMake version 2.8.8 or later (version 2.8.8 is required for the OBJECT targets that reuse built object files).

Dependencies:
 - The Boost Library version 1.46.0 (and 1.48.0 for some parts) or later. Use:
     $ sudo apt-get install libboost-all-dev
   The required Boost components are:
     thread date_time system program_options unit_test_framework filesystem
   The optional Boost components are:
     chrono
     python (for python bindings)



Optional Dependencies for the Path-planning GUI and test programs:
 - OpenCV version 4 or later (used for point-robot topologies (obstacle-courses are images)). Use:
     $ sudo apt-get install libcv4 libcv-dev libcvaux4 libcvaux-dev
 - Qt version 4.6 or later (used for creating GUI applications). Use:
     $ sudo apt-get install libqtcore4 libqtgui4 libqt4-dev
 - Coin3D and SoQt (used in GUI applications for the 3D displays). Use:
     $ sudo apt-get install libcoin60 libcoin60-dev libsoqt4-20 libsoqt-dev-common libsoqt4-dev
 - Python version 2.7 or later (used for python bindings, alongside Boost.Python). Installing Boost.Python should suffice.

Additional Dependencies for other tasks:
 - Git (used for version control for this repository, as well as version-tagging documentation files). Use:
     $ sudo apt-get install git-all
 - Doxygen (used to generate the documentation files). Use:
     $ sudo apt-get install doxygen
   Windows (and with doxygen):
    - HTMLHelp tools to generate compressed help files (.chm files).
   Other OSes (and with doxygen):
    - "qhelpgenerator-qt4" or "qhelpgenerator" to generate Qt-Assistant compressed help files (.qch files).


To build the ReaK platform, run the following commands:

Basic procedure:

 1. Go to the source top-level directory:
     $ cd /path/to/ReaK/src
 2. Create a build folder (out-of-source build), and change to that directory:
     $ mkdir build
     $ cd build
 3. Run cmake on the top-level source folder:
     $ cmake ..
 4. Compile:
     $ make
    (Alternative) To compile a specific module or text program (and its internal dependencies), run this command:
     $ make [specific_target]
    where [specific_target] is replaced by the list of targets to be built (e.g. reak_core or test_math).

CMake options:

  - OUTPUTROOT:
    By default, the targets are built and temporarily (before running "make install") to the directory above the "src"
    directory (code in /path/to/ReaK/src leads to binaries in /path/to/ReaK/bin). To change the top-level directory where 
    folders like "bin", "lib", "dox" and "include" get created and populated, pass the variable OUTPUTROOT to the cmake command:
     $ cmake -DOUTPUTROOT=/my/alternate/path/to/ReaK [other-options] [path-to-src]

  - ENABLE_EXTERN_TEMPLATES:
    By default, the ReaK library does not use extern templates. However, if your compiler supports it (with decent stability), 
    it is highly recommended to reduce compilation times by pre-compiling many of the recurring template instantiations. 
    Enable extern templates as so:
     $ cmake -DENABLE_EXTERN_TEMPLATES:BOOL=true [other-options] [path-to-src]

  - CUSTOM_BOOST_PATH:
    By default, the build system will try to locate Boost by itself (FindBoost), but sometimes this is not very reliable,
    especially if using a custom location or custom build of Boost. If this is the case, you can specify the location 
    where Boost can be found. The cmake script will expect to find Boost headers in "${CUSTOM_BOOST_PATH}/include" and 
    its link-libraries in "${CUSTOM_BOOST_PATH}/lib". Provide the custom path as follows:
     $ cmake -DCUSTOM_BOOST_PATH=/my/alternate/path/to/boost [other-options] [path-to-src]

Advanced procedures:

 - Using an alternative compiler.
   To use an alternative compiler (other than the system's default compiler), it is usually as simple a re-defining the CC / CXX 
   environment variables before running cmake (note, you can re-define them only for the current bash session). As so:
    $ export CC=/path/to/other/compiler ; export CXX=/path/to/other/compiler++ ; cmake [options] [path-to-src]


To install the ReaK platform, run the following command:

     $ make install

 you might need to sudo this command. 

N.B.: that the installation of ReaK is not really maintained or guaranteed to work in any way, 
it is at the bottom of the priorities in this project since the ReaK platform is meant to be an 
open-architecture library and not an end-user, development-package distribution.

N.B.-2: Currently there is no "system" installation being done. All it does is collect the header 
files into the /path/to/ReaK/include directory.






